#!/usr/bin/python3
# -.- coding: utf-8 -.-
# -.- dependencies: Python 3.7+ -.-

"""
Salt2Type

A tool to assist in migrating an existing codebase from Script# to TypeScript.

MIT License

Copyright (c) 2023 Pangaea Information Technologies, Ltd.

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
"""

import os, sys
from xml.etree import ElementTree
from dataclasses import dataclass
from typing import List, Tuple

#############
### TYPES ###
#############


@dataclass
class PropDef:
    """The definition of a property"""

    name: str
    """ The name of the property.  The name will be parameterized if the property is generic. """

    def_val: str | None
    """ The default value of the property (if known/applicable) """

    typ: str | None
    """ The type of the property (if known). """

    desc: str | None
    """ The brief description of the property (if known). """


@dataclass
class MethodDef:
    """The definition of a class method"""

    name: str
    """
    The name of the method (if empty string then this is a constructor).
    The name will be parameterized if the method is generic.
    The name will be prefixed by "operator " if it is implicit.
    The name will be "this[...]" if it is an indexer.
    """

    params: List[PropDef]
    """ The ordered parameters of the method """

    typ: str | None
    """ The return type of the method (if known). """

    body: List[str] | None
    """ The lines making up the body of the method (if known). """

    desc: str | None
    """ The brief description of the method (if known). """


@dataclass
class ClassDef:
    """The definition of a class"""

    namespace: str
    """ The dot-separated namespace that contains the class. """

    name: str
    """ The name of the class. """

    doc_id: str
    """ The ID used to refer to this class in documentation (if applicable). """

    methods: List[MethodDef]
    """ All of the methods in the class. """

    props: List[PropDef]
    """ All of the properties in the class. """

    links: List[str]
    """ The external classes which this class references. This can be specified as a namespace-qualified class name, or as a doc_id. """


######################
### Helper Methods ###
######################


def read_js(filename: str) -> Tuple[str, List[ClassDef]]:
    # pylint: disable=unused-argument
    """
    Reads in the Script# file specified by the given filename and returns its parsed contents.

    @param filename: The JS file to read from
    @return: The name to pass to "ss.initAssembly" followed by all of the class definitions found in the file
    """
    # WRITE ME!

    return ("Type.Scripts", [])


def to_text(node: ElementTree.Element | None) -> str:
    """
    Extracts the text from the specified Element, discarding any tags.  Also removes leading and trailing whitespace.
    """
    if node:
        return "".join(node.itertext()).strip()

    return ""


def to_type(raw_type: str) -> str:
    # pylint: disable=unused-argument
    """
    Converts the raw Doxygen type into a valid typescript type.
    """
    # WRITE ME!

    return raw_type


def read_doc(filename: str) -> List[ClassDef]:
    """
    Reads in the XML Doxygen file specified by the given filename and returns its parsed contents.

    @param filename: The XML file to read from
    @return: All of the class definitions found in the file.
    """
    classes = {}  # key = `${namespace}.${name}`, value = ClassDef

    root = ElementTree.parse(filename).getroot()
    for compound in root.findall("compounddef"):
        kind = compound.get("kind")

        if kind in ("class", "interface"):
            key = compound.find("compoundname").text.replace("::", ".")
            [namespace, name] = key.rsplit(".", 1)
            doc_id = compound.get("id")
            methods = []
            props = []
            links = []

            classes[key] = ClassDef(namespace, name, doc_id, methods, props, links)

            for member in compound.findall("./sectiondef/memberdef"):
                kind = member.get("kind")
                name = member.find("name").text
                desc = to_text(member.find("briefdescription"))
                type_node = member.find("type")
                for ref in type_node.findall("ref"):
                    links.append(ref.get("refid"))
                typ = to_type(to_text(type_node))

                if kind in ("property", "variable", "event"):
                    props.append(PropDef(name, None, typ, desc))

                elif kind == "function":
                    params = []
                    for param in member.findall("param"):
                        pname = param.find("declname").text
                        ptype_node = member.find("type")
                        for ref in ptype_node.findall("ref"):
                            links.append(ref.get("refid"))
                        ptyp = to_type(to_text(ptype_node))
                        params.append(PropDef(pname, None, ptyp, None))

                    methods.append(MethodDef(name, params, typ, None, desc))

    return classes.values()


def add_types(defs: List[ClassDef], types: List[ClassDef]) -> None:
    # pylint: disable=unused-argument
    """
    Updates the class definitions found in C{defs} to specify all of the C{typ} data found in C{types}.  This also adds entries
    to the C{links} list if necessary.

    @param defs: The class definitions to modify in-place to add type definitions.
    @param types: The type definitions to use for lookup.
    """
    # WRITE ME!

    pass # pylint: disable=unnecessary-pass


def copy_file(in_file: str, out_file: str, asm_name: str, ns_name: str) -> None:
    """
    Copies the specified source file to the specified destination file and replacing template keyword with their correct values.

    @param in_file: The template file to read in
    @param out_file: The output file to create
    @param asm_name: The name to pass to "ss.initAssembly"
    @param ns_name: The namespace to export for external use
    """
    lines = []
    with open(in_file, "r") as fil:
        for line in fil:
            line = line.replace("{{FILENAME}}", "%s.js" % asm_name)
            line = line.replace("{{LIBNAME}}", ns_name)
            lines.append(line)

    with open(out_file, "w") as fil:
        for line in lines:
            fil.write(line)


def copy_tpl(out_dir: str, asm_name: str, ns_name: str) -> None:
    """
    Copies the C{tpl} contents into the specified output directory (creating it first if it doesn't already exist) and replacing
    template keywords with their correct values.

    @param out_dir: The output directory
    @param asm_name: The name to pass to "ss.initAssembly"
    @param ns_name: The namespace to export for external use
    """
    tpl_dir = os.path.join(os.path.dirname(sys.argv[0]), "tpl")
    for src_dir, _, files in os.walk(tpl_dir):
        dst_dir = src_dir.replace(tpl_dir, out_dir, 1)
        if not os.path.exists(dst_dir):
            os.makedirs(dst_dir)
        for fil in files:
            src_file = os.path.join(src_dir, fil)
            dst_file = os.path.join(dst_dir, fil)
            copy_file(src_file, dst_file, asm_name, ns_name)


def gen_ts(out_dir: str, defs: List[ClassDef]) -> None:
    # pylint: disable=unused-argument
    """
    Generates the typescript files for each known class in the specified output directory.

    @param out_dir: The output directory
    @param defs: The classes
    """
    # WRITE ME!

    pass # pylint: disable=unnecessary-pass


def gen_index(out_dir: str, defs: List[ClassDef]) -> None:
    # pylint: disable=unused-argument
    """
    Generates the index.ts file exporting each known class in the specified output directory.

    @param out_dir: The output directory
    @param defs: The classes
    """
    # WRITE ME!

    pass # pylint: disable=unnecessary-pass


###################
### Main Method ###
###################

if __name__ == "__main__":
    if len(sys.argv) != 5:
        raise SystemExit("Usage: %s JSFILE XMLFILE OUTDIR NSNAME" % sys.argv[0])

    [_, JS_FILE, XML_FILE, OUT_DIR, NS_NAME] = sys.argv # pylint: disable=unbalanced-tuple-unpacking

    ASM_NAME, CLASSES = read_js(JS_FILE)
    TYPES = read_doc(XML_FILE)
    add_types(CLASSES, TYPES)

    copy_tpl(OUT_DIR, ASM_NAME, NS_NAME)
    gen_ts(OUT_DIR, CLASSES)
    gen_index(OUT_DIR, CLASSES)
